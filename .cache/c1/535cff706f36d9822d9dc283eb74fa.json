{"id":"assets/test2.frag","dependencies":[{"name":"/Users/kaito/workspace/p5/package.json","includedInParent":true,"mtime":1624554175995}],"generated":{"js":"module.exports = \"// this is a port of \\\"recursive noise experiment\\\" by ompuco\\n// https://www.shadertoy.com/view/wllGzr\\n// casey conchinha - @kcconch ( https://github.com/kcconch )\\n// more p5.js + shader examples: https://itp-xstory.github.io/p5js-shaders/\\n\\n#ifdef GL_ES\\nprecision mediump float;\\n#define GLSLIFY 1\\n#endif\\n\\nuniform vec2 iResolution;\\nuniform int iFrame;\\nuniform vec2 iMouse;\\n\\nfloat noise(vec3 x) {\\n  vec3 p = floor(x);\\n  float n = p.x + p.y + p.z;\\n  return sin(n);\\n}\\n\\nvoid main() {\\n\\n  vec3 t = (float(iFrame) * vec3(1.0, 2.0, 3.0) / 1.0) / 100.0;\\n\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  uv = uv - 1.5;\\n  // uv -= iMouse.xy / iResolution.xy / 4.0;\\n\\n  vec3 col = vec3(0.0);\\n\\n  for (int i = 0; i < 32; i++) {\\n    float i2 = float(i) * 1.0 + 10.0;\\n    float i3 = sign(sin(i2 * 0.01));\\n    col.r += noise(uv.xyy + col.rgb + i3 * t);\\n    col.g += noise(uv.xyx + col.rgb + i3 * t);\\n    col.b += noise(uv.yyx + col.rgb + i3 * t);\\n  }\\n  \\n  col.rgb /= 32.0;\\n  col.rgb = mix(col.rgb, normalize(col.rgb) * 2.0, 1.0);\\n  col.rgb += .3;\\n\\n  // Output to screen\\n  gl_FragColor = vec4(col, 1.0);\\n}\";"},"sourceMaps":{"js":{"mappings":[{"name":"module","generated":{"line":1,"column":0},"source":"assets/test2.frag","original":{"line":1,"column":0}},{"generated":{"line":1,"column":6},"source":"assets/test2.frag","original":{"line":1,"column":6}},{"name":"exports","generated":{"line":1,"column":7},"source":"assets/test2.frag","original":{"line":1,"column":7}},{"generated":{"line":1,"column":14},"source":"assets/test2.frag","original":{"line":1,"column":0}},{"generated":{"line":1,"column":17},"source":"assets/test2.frag","original":{"line":1,"column":15}},{"generated":{"line":1,"column":1197},"source":"assets/test2.frag","original":{"line":1,"column":0}}],"sources":{"assets/test2.frag":"module.exports=\"// this is a port of \\\"recursive noise experiment\\\" by ompuco\\n// https://www.shadertoy.com/view/wllGzr\\n// casey conchinha - @kcconch ( https://github.com/kcconch )\\n// more p5.js + shader examples: https://itp-xstory.github.io/p5js-shaders/\\n\\n#ifdef GL_ES\\nprecision mediump float;\\n#define GLSLIFY 1\\n#endif\\n\\nuniform vec2 iResolution;\\nuniform int iFrame;\\nuniform vec2 iMouse;\\n\\nfloat noise(vec3 x) {\\n  vec3 p = floor(x);\\n  float n = p.x + p.y + p.z;\\n  return sin(n);\\n}\\n\\nvoid main() {\\n\\n  vec3 t = (float(iFrame) * vec3(1.0, 2.0, 3.0) / 1.0) / 100.0;\\n\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  uv = uv - 1.5;\\n  // uv -= iMouse.xy / iResolution.xy / 4.0;\\n\\n  vec3 col = vec3(0.0);\\n\\n  for (int i = 0; i < 32; i++) {\\n    float i2 = float(i) * 1.0 + 10.0;\\n    float i3 = sign(sin(i2 * 0.01));\\n    col.r += noise(uv.xyy + col.rgb + i3 * t);\\n    col.g += noise(uv.xyx + col.rgb + i3 * t);\\n    col.b += noise(uv.yyx + col.rgb + i3 * t);\\n  }\\n  \\n  col.rgb /= 32.0;\\n  col.rgb = mix(col.rgb, normalize(col.rgb) * 2.0, 1.0);\\n  col.rgb += .3;\\n\\n  // Output to screen\\n  gl_FragColor = vec4(col, 1.0);\\n}\";"},"lineCount":null}},"error":null,"hash":"4eda6fbfd13890c3d165870140e16215","cacheData":{"env":{}}}