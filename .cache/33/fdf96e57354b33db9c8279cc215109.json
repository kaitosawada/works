{"id":"assets/shader.frag","dependencies":[{"name":"/Users/kaito/workspace/p5/package.json","includedInParent":true,"mtime":1624553305919}],"generated":{"js":"module.exports = \"// this is a port of \\\"recursive noise experiment\\\" by ompuco\\n// https://www.shadertoy.com/view/wllGzr\\n// casey conchinha - @kcconch ( https://github.com/kcconch )\\n// more p5.js + shader examples: https://itp-xstory.github.io/p5js-shaders/\\n\\n#ifdef GL_ES\\nprecision mediump float;\\n#define GLSLIFY 1\\n#endif\\n\\nuniform vec2 iResolution;\\nuniform int iFrame;\\nuniform vec2 iMouse;\\n\\nfloat hash( float n )\\n\\t\\t\\t{\\n\\t\\t\\t    return fract(sin(n)*43758.5453);\\n\\t\\t\\t}\\n\\n\\t\\t\\tfloat noise( vec3 x )\\n\\t\\t\\t{\\n\\t\\t\\t    // The noise function returns a value in the range -1.0f -> 1.0f\\n\\n\\t\\t\\t    vec3 p = floor(x);\\n\\t\\t\\t    vec3 f = fract(x);\\n\\n\\t\\t\\t    f       = f*f*(3.0-2.0*f);\\n\\t\\t\\t    float n = p.x + p.y*57.0 + 113.0*p.z;\\n\\n\\t\\t\\t    return mix(mix(mix( hash(n+0.0), hash(n+1.0),f.x),\\n\\t\\t\\t                   mix( hash(n+57.0), hash(n+58.0),f.x),f.y),\\n\\t\\t\\t               mix(mix( hash(n+113.0), hash(n+114.0),f.x),\\n\\t\\t\\t                   mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z)-.5;\\n\\t\\t\\t}\\n\\nvoid main()\\n{\\n    \\n    \\n    vec3 t = (float(iFrame)*vec3(1.0,2.0,3.0)/1.0)/1000.0;//+iMouse.xyz/1000.0;\\n\\n    \\n    // Normalized pixel coordinates (from 0 to 1)\\n    vec2 uv = gl_FragCoord.xy/iResolution.xy;\\n    uv=uv/4.0+.5;\\n    uv-=iMouse.xy/iResolution.xy/4.0;\\n\\n    vec3 col = vec3(0.0);\\n    \\n    \\n    \\n    for(int i = 0; i < 16; i++){\\n        float i2 = float(i)*1.0;\\n\\t\\t\\t\\t\\tcol.r+=noise(uv.xyy*(12.0+i2)+col.rgb+t*sign(sin(i2/3.0)));\\n\\t\\t\\t\\t\\tcol.g+=noise(uv.xyx*(12.0+i2)+col.rgb+t*sign(sin(i2/3.0)));\\n\\t\\t\\t\\t\\tcol.b+=noise(uv.yyx*(12.0+i2)+col.rgb+t*sign(sin(i2/3.0)));\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\n\\t for(int i = 0; i < 16; i++){\\n        float i2 = float(i)*1.0;\\n\\t\\t\\t\\t\\tcol.r+=noise(uv.xyy*(32.0)+col.rgb+t*sign(sin(i2/3.0)));\\n\\t\\t\\t\\t\\tcol.g+=noise(uv.xyx*(32.0)+col.rgb+t*sign(sin(i2/3.0)));\\n\\t\\t\\t\\t\\tcol.b+=noise(uv.yyx*(32.0)+col.rgb+t*sign(sin(i2/3.0)));\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcol.rgb/=32.0;\\n\\t\\t\\t\\tcol.rgb=mix(col.rgb,normalize(col.rgb)*2.0,1.0);\\n\\t\\t\\t\\tcol.rgb+=.3;\\n    \\n    \\n\\n    // Output to screen\\n    gl_FragColor = vec4(col,1.0);\\n}\";"},"sourceMaps":{"js":{"mappings":[{"name":"module","generated":{"line":1,"column":0},"source":"assets/shader.frag","original":{"line":1,"column":0}},{"generated":{"line":1,"column":6},"source":"assets/shader.frag","original":{"line":1,"column":6}},{"name":"exports","generated":{"line":1,"column":7},"source":"assets/shader.frag","original":{"line":1,"column":7}},{"generated":{"line":1,"column":14},"source":"assets/shader.frag","original":{"line":1,"column":0}},{"generated":{"line":1,"column":17},"source":"assets/shader.frag","original":{"line":1,"column":15}},{"generated":{"line":1,"column":2132},"source":"assets/shader.frag","original":{"line":1,"column":0}}],"sources":{"assets/shader.frag":"module.exports=\"// this is a port of \\\"recursive noise experiment\\\" by ompuco\\n// https://www.shadertoy.com/view/wllGzr\\n// casey conchinha - @kcconch ( https://github.com/kcconch )\\n// more p5.js + shader examples: https://itp-xstory.github.io/p5js-shaders/\\n\\n#ifdef GL_ES\\nprecision mediump float;\\n#define GLSLIFY 1\\n#endif\\n\\nuniform vec2 iResolution;\\nuniform int iFrame;\\nuniform vec2 iMouse;\\n\\nfloat hash( float n )\\n\\t\\t\\t{\\n\\t\\t\\t    return fract(sin(n)*43758.5453);\\n\\t\\t\\t}\\n\\n\\t\\t\\tfloat noise( vec3 x )\\n\\t\\t\\t{\\n\\t\\t\\t    // The noise function returns a value in the range -1.0f -> 1.0f\\n\\n\\t\\t\\t    vec3 p = floor(x);\\n\\t\\t\\t    vec3 f = fract(x);\\n\\n\\t\\t\\t    f       = f*f*(3.0-2.0*f);\\n\\t\\t\\t    float n = p.x + p.y*57.0 + 113.0*p.z;\\n\\n\\t\\t\\t    return mix(mix(mix( hash(n+0.0), hash(n+1.0),f.x),\\n\\t\\t\\t                   mix( hash(n+57.0), hash(n+58.0),f.x),f.y),\\n\\t\\t\\t               mix(mix( hash(n+113.0), hash(n+114.0),f.x),\\n\\t\\t\\t                   mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z)-.5;\\n\\t\\t\\t}\\n\\nvoid main()\\n{\\n    \\n    \\n    vec3 t = (float(iFrame)*vec3(1.0,2.0,3.0)/1.0)/1000.0;//+iMouse.xyz/1000.0;\\n\\n    \\n    // Normalized pixel coordinates (from 0 to 1)\\n    vec2 uv = gl_FragCoord.xy/iResolution.xy;\\n    uv=uv/4.0+.5;\\n    uv-=iMouse.xy/iResolution.xy/4.0;\\n\\n    vec3 col = vec3(0.0);\\n    \\n    \\n    \\n    for(int i = 0; i < 16; i++){\\n        float i2 = float(i)*1.0;\\n\\t\\t\\t\\t\\tcol.r+=noise(uv.xyy*(12.0+i2)+col.rgb+t*sign(sin(i2/3.0)));\\n\\t\\t\\t\\t\\tcol.g+=noise(uv.xyx*(12.0+i2)+col.rgb+t*sign(sin(i2/3.0)));\\n\\t\\t\\t\\t\\tcol.b+=noise(uv.yyx*(12.0+i2)+col.rgb+t*sign(sin(i2/3.0)));\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\n\\t for(int i = 0; i < 16; i++){\\n        float i2 = float(i)*1.0;\\n\\t\\t\\t\\t\\tcol.r+=noise(uv.xyy*(32.0)+col.rgb+t*sign(sin(i2/3.0)));\\n\\t\\t\\t\\t\\tcol.g+=noise(uv.xyx*(32.0)+col.rgb+t*sign(sin(i2/3.0)));\\n\\t\\t\\t\\t\\tcol.b+=noise(uv.yyx*(32.0)+col.rgb+t*sign(sin(i2/3.0)));\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcol.rgb/=32.0;\\n\\t\\t\\t\\tcol.rgb=mix(col.rgb,normalize(col.rgb)*2.0,1.0);\\n\\t\\t\\t\\tcol.rgb+=.3;\\n    \\n    \\n\\n    // Output to screen\\n    gl_FragColor = vec4(col,1.0);\\n}\";"},"lineCount":null}},"error":null,"hash":"5282b6113f8e4289487afbe5847951ad","cacheData":{"env":{}}}