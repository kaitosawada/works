{"id":"assets/test3.frag","dependencies":[{"name":"/Users/kaito/workspace/p5/package.json","includedInParent":true,"mtime":1624554175995}],"generated":{"js":"module.exports = \"// http://glslsandbox.com/e#49090.4\\n\\n#ifdef GL_ES\\nprecision mediump float;\\n#define GLSLIFY 1\\n#endif\\n\\nuniform int iFrame;\\nuniform vec2 iMouse;\\nuniform vec2 iResolution;\\n\\nfloat linearstep(float edge0, float edge1, float x) {\\n  return min(max((x - edge0) / (edge1 - edge0) * 2.0, 0.0), 1.0);\\n}\\n\\nvec2 rotate(vec2 v, float a) {\\n  float s = sin(a);\\n  float c = cos(a);\\n  mat2 m = mat2(c, -s, s, c);\\n  return m * v;\\n}\\n\\nvec2 circle(vec2 uv, float radius) {\\n  return vec2(length(uv), radius); // .x = distance, .y = offset\\n}\\n\\nfloat object(vec2 uv, float time, float k, float t, float freq) {\\n  vec2 repeatedUv = uv;\\n  repeatedUv -= 0.5;\\n  for (int i = 0; i < 16; i++) {\\n    repeatedUv += sin(time + uv.x * 30.0) * sin(time * freq + float(i)) *\\n                  exp(sin(time * 8.0)) * t;\\n    repeatedUv += sin(time + uv.y * 30.0) * sin(time * freq + float(i)) *\\n                  exp(sin(time * 8.0)) * t;\\n    repeatedUv = rotate(repeatedUv, float(i) * k);\\n  }\\n\\n  vec2 distanceAndOffset = circle(repeatedUv, 1.0);\\n  return linearstep(distanceAndOffset.x - 2.0, distanceAndOffset.x + 2.0,\\n                    distanceAndOffset.y);\\n}\\n\\nvoid main(void) {\\n\\n  float time = float(iFrame) * 0.01;\\n  vec2 uv = (gl_FragCoord.xy / max(iResolution.x, iResolution.y) - 0.8) * 2.0;\\n\\n  float changingOffset = object(uv, time, 0.5, 0.3, 5.0);\\n  float changingOffset2 = object(uv - vec2(1.0, 1.0), time, 0.5, 0.3, 5.0);\\n  float mixed = mix(changingOffset, changingOffset2, 0.5);\\n  vec3 color = vec3(mixed);\\n\\n  gl_FragColor = vec4(color, 1.0);\\n}\";"},"sourceMaps":{"js":{"mappings":[{"name":"module","generated":{"line":1,"column":0},"source":"assets/test3.frag","original":{"line":1,"column":0}},{"generated":{"line":1,"column":6},"source":"assets/test3.frag","original":{"line":1,"column":6}},{"name":"exports","generated":{"line":1,"column":7},"source":"assets/test3.frag","original":{"line":1,"column":7}},{"generated":{"line":1,"column":14},"source":"assets/test3.frag","original":{"line":1,"column":0}},{"generated":{"line":1,"column":17},"source":"assets/test3.frag","original":{"line":1,"column":15}},{"generated":{"line":1,"column":1590},"source":"assets/test3.frag","original":{"line":1,"column":0}}],"sources":{"assets/test3.frag":"module.exports=\"// http://glslsandbox.com/e#49090.4\\n\\n#ifdef GL_ES\\nprecision mediump float;\\n#define GLSLIFY 1\\n#endif\\n\\nuniform int iFrame;\\nuniform vec2 iMouse;\\nuniform vec2 iResolution;\\n\\nfloat linearstep(float edge0, float edge1, float x) {\\n  return min(max((x - edge0) / (edge1 - edge0) * 2.0, 0.0), 1.0);\\n}\\n\\nvec2 rotate(vec2 v, float a) {\\n  float s = sin(a);\\n  float c = cos(a);\\n  mat2 m = mat2(c, -s, s, c);\\n  return m * v;\\n}\\n\\nvec2 circle(vec2 uv, float radius) {\\n  return vec2(length(uv), radius); // .x = distance, .y = offset\\n}\\n\\nfloat object(vec2 uv, float time, float k, float t, float freq) {\\n  vec2 repeatedUv = uv;\\n  repeatedUv -= 0.5;\\n  for (int i = 0; i < 16; i++) {\\n    repeatedUv += sin(time + uv.x * 30.0) * sin(time * freq + float(i)) *\\n                  exp(sin(time * 8.0)) * t;\\n    repeatedUv += sin(time + uv.y * 30.0) * sin(time * freq + float(i)) *\\n                  exp(sin(time * 8.0)) * t;\\n    repeatedUv = rotate(repeatedUv, float(i) * k);\\n  }\\n\\n  vec2 distanceAndOffset = circle(repeatedUv, 1.0);\\n  return linearstep(distanceAndOffset.x - 2.0, distanceAndOffset.x + 2.0,\\n                    distanceAndOffset.y);\\n}\\n\\nvoid main(void) {\\n\\n  float time = float(iFrame) * 0.01;\\n  vec2 uv = (gl_FragCoord.xy / max(iResolution.x, iResolution.y) - 0.8) * 2.0;\\n\\n  float changingOffset = object(uv, time, 0.5, 0.3, 5.0);\\n  float changingOffset2 = object(uv - vec2(1.0, 1.0), time, 0.5, 0.3, 5.0);\\n  float mixed = mix(changingOffset, changingOffset2, 0.5);\\n  vec3 color = vec3(mixed);\\n\\n  gl_FragColor = vec4(color, 1.0);\\n}\";"},"lineCount":null}},"error":null,"hash":"84e5605c207ed2194c39127d342f3b6d","cacheData":{"env":{}}}